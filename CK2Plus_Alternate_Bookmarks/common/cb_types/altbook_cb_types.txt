## normal scopes(including posttitle scopes) ##
# ROOT = actor
# FROM = recipient
# <no scope change> = thirdparty character
## title scopes ##
# ROOT = actor
# FROM = recipient
# <no scope change> = thirdparty landed title	
#
# the following effects/triggers exists (example execution order: on_success->on_success_title->on_success_posttitle):
# is_valid, is_valid_title, on_add, on_add_title, on_add_posttitle, on_success, on_success_title, on_success_posttitle, on_fail, on_fail_title, on_fail_posttitle, on_reverse_demand, on_reverse_demand_title, on_reverse_demand_posttitle
#
# Added on_attacker_leader_death, on_defender_leader_death and on_thirdparty_death, which all trigger when corresponding character dies
# These three all have war scopes, which currently has the following scope changes: 
# attacker, defender, thirdparty(only valid if thirdparty character is involved), thirdparty_title(only valid if thirdparty title is involved)
#


shattered_world_conquest = {
	name = CB_NAME_ALT_SCEN
	war_name = WAR_NAME_ALT_SCEN
	sprite = 1
	truce_days = 3650
	hostile_against_others = yes
	is_permanent = yes
	can_call_allies = no # Can either side call allies
	can_attack_vassals = yes
	check_all_titles = yes # if permanent, setting this to true will check against all of someones titles, including vassal held titles
	can_ask_to_join_war = yes
	
	can_use = { 
		ROOT = { NOT = { has_character_modifier = holding_epic_tournament }	}
		ROOT = { NOT = { has_character_modifier = holy_truce_timer } }
		FROM = { NOT = { has_character_modifier = holy_truce_timer } }
		ROOT = { 
			primary_title = { tier = COUNT } 
			independent = yes
			NOT = { num_of_count_titles = 4 }
		}
		FROM = { 
			primary_title = { tier = COUNT }
			independent = yes
		}
		has_global_flag = enable_casusbellis
		has_global_flag = shattered_world
		NOT = { has_global_flag = reign_of_princes }
	}
	
	can_use_title = {
		tier = count
		location = { 
			any_neighbor_province = {
				owner = { character = ROOT }
			}
		}
	}
	
	is_valid_title = {
		FROM = {
			has_landed_title = PREV
		}
		location = { 
			any_neighbor_province = {
				owner = { character = ROOT }
			}
		}
	}
	
	on_add = {
	}
	
	on_success = {
		ROOT = { add_character_modifier = { name = victory_timer duration = 3 hidden = yes } }
	}
		
	
	on_success_title = {	
		usurp_title_plus_barony_if_unlanded = ROOT
		any_de_jure_vassal_title = { # take all baronies under the one we're fighting for
			limit = {
				has_holder = yes
				NOT = {
					de_facto_liege = PREV
				}
				holder_scope = {
					OR = {
						character = FROM
						is_liege_or_above = FROM
					}
				}
			}

			usurp_title_plus_barony_if_unlanded = ROOT
		}
	}

	on_fail = {
		ROOT = {
			prestige = -100
		}
	}

	on_reverse_demand = {
		ROOT = {
			prestige = -200
		}
		FROM = {
			prestige = 100
		}
	}
	
	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
}

reign_of_princes_conquest = {
	name = CB_NAME_PRINCES
	war_name = WAR_NAME_PRINCES
	sprite = 1
	truce_days = 3650
	hostile_against_others = no
	is_permanent = yes
	can_call_allies = yes # Can either side call allies
	can_attack_vassals = yes
	check_all_titles = yes # if permanent, setting this to true will check against all of someones titles, including vassal held titles
	can_ask_to_join_war = yes
	
	can_use = {
		ROOT = { NOT = { has_character_modifier = holding_epic_tournament }	}
		ROOT = { NOT = { has_character_modifier = holy_truce_timer } }
		FROM = { NOT = { has_character_modifier = holy_truce_timer } }
		ROOT = { 
			tier = DUKE
			NOT = { num_of_duke_titles = 3 }
			independent = yes
		}
		FROM = {
			tier = DUKE
		}
		has_global_flag = enable_casusbellis
		has_global_flag = reign_of_princes
		NOT = { has_global_flag = shattered_world }
	}
	
	can_use_title = {
		tier = count
		location = {   # target province
			owner = { same_realm = FROM }	# ...which is of the attackers realm
			any_neighbor_province = {   # attacking from this province...
				owner = { same_realm = ROOT }
				OR = {
					any_province_lord = { de_jure_liege_or_above = ROOT }
					any_province_lord = { de_jure_liege_or_above = FROM }
				}
			}
		}
	}
	
	is_valid_title = {
		location = {   # target province
			owner = { same_realm = FROM }	# ...which is of the attackers realm
			any_neighbor_province = {   # attacking from this province...
				owner = { same_realm = ROOT }
				OR = {
					any_province_lord = { de_jure_liege_or_above = ROOT }
					any_province_lord = { de_jure_liege_or_above = FROM }
				}
			}
		}
	}
	
	on_add = {
	}
	
	on_success = {
		ROOT = { add_character_modifier = { name = victory_timer duration = 3 hidden = yes } }
	}
	
	on_success_title = {	
		if = {  # if the target province is ruled by a count vassal, take the vassal.
			limit = {
				holder_scope = {
					tier = count
					NOT = { num_of_count_titles = 2 }
				}
			}
			holder_scope = {
				set_defacto_liege = ROOT
			}
		}
		if = { #if the target is ruled by a count vassal with more titles, take the title
			limit = {
				holder_scope = {
					tier = count
					num_of_count_titles = 2
				}
			}
			usurp_title_plus_barony_if_unlanded = ROOT
			any_de_jure_vassal_title = { # take all baronies under the one we're fighting for
				limit = {
					has_holder = yes
					NOT = {
						de_facto_liege = PREV
					}
					holder_scope = {
						OR = {
							character = FROM
							is_liege_or_above = FROM
						}
					}
				}
				usurp_title_plus_barony_if_unlanded = ROOT
			}
		}
		if = { # if the target is owned by the target duke, take the title
			limit = {
				holder_scope = {
					tier = duke
				}
			}
			usurp_title_plus_barony_if_unlanded = ROOT
			any_de_jure_vassal_title = { # take all baronies under the one we're fighting for
				limit = {
					has_holder = yes
					NOT = {
						de_facto_liege = PREV
					}
					holder_scope = {
						OR = {
							character = FROM
							is_liege_or_above = FROM
						}
					}
				}
				usurp_title_plus_barony_if_unlanded = ROOT
			}
		}
	}
	
	on_fail = {
		ROOT = {
			prestige = -100
		}
	}

	on_reverse_demand = {
		ROOT = {
			prestige = -200
		}
		FROM = {
			prestige = 100
		}
	}
	
	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
}